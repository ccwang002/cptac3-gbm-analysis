import csv
from textwrap import dedent
from pathlib import Path
import string
import uuid

BAM_MAP_PTH = '../matt_catalog/katmai.BamMap.dat'
LOCALLY_LINKED_RNASEQ_FASTQ_PATTERN = 'external_data/CPTAC_RNA_fq/{sample}.{strand}.fastq.gz'
OUTPUT_FOLDER = '/diskmnt/Projects/cptac_scratch_2/CPTAC3_GBM_custom_BAMs/rnaseq'
# GDC References
GENOME_FA = '/diskmnt/Datasets/Reference/GRCh38.d1.vd1/GRCh38.d1.vd1.fa'
STAR_INDEX_FOLDER = '/diskmnt/Datasets/Reference/GDC/star_genome_d1_vd1_gtfv22.rebuild'
STAR_GTF = '/diskmnt/Datasets/Reference/GDC/gencode.v22.annotation.gtf'

replacement_tumors = [
    f'{case}_tumor'
    for case in ['C3L-03387', 'C3L-03390', 'C3L-03400', 'C3L-03405']
]
qc_repeat_tumors = [
    f'{case}_tumor'
    for case in ['C3L-02707', 'C3N-01818', 'C3L-02504', 'C3L-01049', 'C3N-02181']
]
# Currently missing PT-Q2AG
gtex_normals = [
    f'{case}_tissue_normal'
    for case in ['PT-NPJ7', 'PT-P44H', 'PT-QVJO', 'PT-R55F',
                 'PT-RN5K', 'PT-RU72', 'PT-UTHO', 'PT-WVLH', 'PT-Y8DK']
]

SAMPLES = [
    *replacement_tumors,
    *qc_repeat_tumors,
    *gtex_normals,
]


class PartialFormatter(string.Formatter):
    """A partial string formatter.

    Example:

        >>> fmt = PartialFormatter()
        >>> fmt.format('Sale on {date} is {num_box}', date='2019-08-07')
        'Sale on 2019-08-07 is {num_box}'

    """
    def get_value(self, key, args, kwargs):
        try:
            val = super().get_value(key, args, kwargs)
        except (KeyError, IndexError):
            val = f'{{{key}}}'
        return val

_partial_fmt = PartialFormatter()


rule link_gdc_rna_fastqs:
    """Link the GDC RNA-seq fastqs locally."""
    input: local_map=BAM_MAP_PTH
    output:
        all_fqs=expand(LOCALLY_LINKED_RNASEQ_FASTQ_PATTERN, sample=SAMPLES, strand=['R1', 'R2'])
    run:
        # Create a UUID to local file path map
        uuid_to_local_file_pth = {}
        with open(input['local_map']) as f:
            reader = csv.DictReader(f, dialect='excel-tab')
            for row in reader:
                sample = f"{row['case']}_{row['sample_type']}"
                if not (sample in SAMPLES and
                        row['experimental_strategy'] == 'RNA-Seq' and
                        row['data_format'] == 'FASTQ'):
                    continue
                full_sample_name = row['# sample_name']
                # get the RNA strand, R1 or R2
                strand = full_sample_name.rsplit('.', 2)[-2]
                assert strand in ('R1', 'R2')
                src_pth = Path(row['data_path'])
                dst_pth = Path(LOCALLY_LINKED_RNASEQ_FASTQ_PATTERN
                               .format(sample=sample, strand=strand))
                dst_pth.symlink_to(src_pth)


rule star_align:
    """STAR align one sample."""
    output:
        unsorted_bam=f'{OUTPUT_FOLDER}/star/{{sample}}/Aligned.out.bam',
        sorted_bam=f'{OUTPUT_FOLDER}/star/{{sample}}/Aligned.sortedByCoord.out.bam',
        chimeric_sam=f'{OUTPUT_FOLDER}/star/{{sample}}/Chimeric.out.sam',
        chimeric_junction=f'{OUTPUT_FOLDER}/star/{{sample}}/Chimeric.out.junction',
        quant_tx_bam=f'{OUTPUT_FOLDER}/star/{{sample}}/Aligned.toTranscriptome.out.bam',
        quant_gene_count_tab=f'{OUTPUT_FOLDER}/star/{{sample}}/ReadsPerGene.out.tab',
        sj_count_tab=f'{OUTPUT_FOLDER}/star/{{sample}}/SJ.out.tab',
    input:
        r1_fq=_partial_fmt.format(LOCALLY_LINKED_RNASEQ_FASTQ_PATTERN, strand='R1'),
        r2_fq=_partial_fmt.format(LOCALLY_LINKED_RNASEQ_FASTQ_PATTERN, strand='R2')
    params:
        star_ix=STAR_INDEX_FOLDER,
        star_gtf=STAR_GTF,
        out_folder=f'{OUTPUT_FOLDER}/star/{{sample}}/'
    log: 'logs/star/{sample}.log'
    threads: 6
    shell:
        dedent(r'''\
            STAR \
            --readFilesIn {input.r1_fq} {input.r2_fq} \
            --alignIntronMax 1000000 \
            --alignIntronMin 20 \
            --alignMatesGapMax 1000000 \
            --alignSJDBoverhangMin 1 \
            --alignSJoverhangMin 8 \
            --alignSoftClipAtReferenceEnds Yes \
            --chimJunctionOverhangMin 15 \
            --chimMainSegmentMultNmax 1 \
            --chimOutType Junctions SeparateSAMold WithinBAM SoftClip \
            --chimOutJunctionFormat 1 \
            --chimSegmentMin 15 \
            --genomeDir {params.star_ix} \
            --genomeLoad NoSharedMemory \
            --limitBAMsortRAM 0 \
            --limitSjdbInsertNsj 1200000 \
            --outFileNamePrefix {params.out_folder} \
            --outFilterIntronMotifs None \
            --outFilterMatchNminOverLread 0.33 \
            --outFilterMismatchNmax 999 \
            --outFilterMismatchNoverLmax 0.1 \
            --outFilterMultimapNmax 20 \
            --outFilterScoreMinOverLread 0.33 \
            --outFilterType BySJout \
            --outSAMattributes NH HI AS nM NM ch \
            --outSAMstrandField intronMotif \
            --outSAMtype BAM Unsorted SortedByCoordinate \
            --outSAMunmapped Within \
            --quantMode TranscriptomeSAM GeneCounts \
            --readFilesCommand zcat \
            --runThreadN {threads} \
            --twopassMode Basic \
            > {log}
        ''')


rule samtools_index_bam:
    """Index a sorted BAM by samtools."""
    output: '{name}.bam.bai'
    input: '{name}.bam'
    resources:
        io_heavy=1
    shell: 'samtools index {input} {output}'


rule star_align_all_samples:
    """Align all RNA-seq samples."""
    input:
        all_unsorted_bams=expand(rules.star_align.output.unsorted_bam, sample=SAMPLES),
        all_sorted_bams=expand(rules.star_align.output.sorted_bam, sample=SAMPLES),
        all_sorted_bam_bais=expand(rules.star_align.output.sorted_bam + '.bai', sample=SAMPLES)



def gen_bam_map(bam_pth_pattern):
    """Generate the BAM map given the BAM file path pattern."""
    # Generate BAM map
    # (case, sample_type) -> bam_pth
    bam_map = {}
    for sample in SAMPLES:
        case, sample_type = sample.split('_', 1)
        bam_map[(case, sample_type)] = Path(bam_pth_pattern.format(sample=sample))
    return bam_map


def write_manifest(bam_map, manifest_pth):
    """Output the BAM map to the given manifest path."""
    columns = [
        '# sample_name', 'case', 'disease', 'experimental_strategy', 'sample_type',
        'data_path', 'filesize', 'data_format', 'reference', 'UUID', 'system'
    ]
    with open(manifest_pth, 'w') as f:
        writer = csv.writer(f, dialect='excel-tab', lineterminator='\n')
        writer.writerow(columns)  # Write header
        for (case, sample_type), data_pth in bam_map.items():
            if sample_type == 'blood_normal':
                abbrv = 'N'
            elif sample_type == 'tissue_normal':
                abbrv = 'A'
            elif sample_type == 'tumor':
                abbrv = 'T'
            else:
                raise ValueError(f'Unknown sample type {sample_type}')
            sample_name = f'{case}.RNA-Seq.{abbrv}.hg38-washu'
            file_size = data_pth.stat().st_size

            # Generate a new UUID
            data_id = str(uuid.uuid4())

            writer.writerow([
                sample_name, case, 'GBM', 'RNA-Seq', sample_type,
                str(data_pth), str(file_size), 'BAM', 'hg38', data_id, 'katmai',
            ])



rule gen_washu_bam_map:
    """Generate the map of the custom aligned BAMs."""
    output:
        unsorted_bam_map='tracked_results/washu_rnaseq_unsorted_bam_map.katmai.tsv',
        sorted_bam_map='tracked_results/washu_rnaseq_sorted_bam_map.katmai.tsv'
    input:
        all_unsorted_bams=expand(rules.star_align.output.unsorted_bam, sample=SAMPLES),
        all_sorted_bams=expand(rules.star_align.output.sorted_bam, sample=SAMPLES)
    run:
        for bam_pattern, manifest_pth in [
                (rules.star_align.output.unsorted_bam, output.unsorted_bam_map),
                (rules.star_align.output.sorted_bam, output.sorted_bam_map),
        ]:
            bam_map = gen_bam_map(bam_pattern)
            write_manifest(bam_map, manifest_pth)

