import csv
from collections import namedtuple
from pathlib import Path

OMIC_UUID_MANIFEST = '../201811_locate_gdc_data/tracked_results/CPTAC3_GBM_GDC_omics_UUIDs.tsv'
KATMAI_MAP = '../201811_locate_gdc_data/matt_catelog/katmai.BamMap.dat'
ENSEMBL_VER = '90'

SAMPLES = set()
with open(OMIC_UUID_MANIFEST) as f:
    reader = csv.DictReader(f, dialect='excel-tab')
    SAMPLES = set(row['case'] for row in reader)

SALMON_INDEX = 'processed_data/tx_ref/ensembl_90_good_tsl_index'


# GTEx {{{
GTExBAM = namedtuple('GTExBAM', 'case srr_id')
GTEX_BRAIN_CORTEX_SAMPLES = [
    GTExBAM(*case) for case in [
        # case        brain cortex SRR id
        ["GTEX-R55F", "SRR1417912"],
        ["GTEX-RU72", "SRR1475168"],
        ["GTEX-Y8DK", "SRR1480059"],
        ["GTEX-Q2AG", "SRR602927"],
        ["GTEX-NPJ7", "SRR604026"],
        # ["GTEX-R55F", "SRR615213"],
        ["GTEX-QVJO", "SRR615838"],
        ["GTEX-UTHO", "SRR656745"],
        ["GTEX-WVLH", "SRR810877"],
    ]
]
all_gtex_brain_cortex_bams = expand('external_data/GTEx_RNA_bam/{case}.brain_cortex.bam', case=[s.case for s in GTEX_BRAIN_CORTEX_SAMPLES])

rule copy_gtex_rnaseq_bams:
    output: all_gtex_brain_cortex_bams
    params:
        mgi_bam_root='/gscmnt/gc2802/halllab/cchiang/projects/gtex/rna-seq/4101/bam'
    run:
        for sample in GTEX_BRAIN_CORTEX_SAMPLES:
            shell(
                "rsync -a --info=progress2 --partial --bwlimit=25000 "
                "vw5.gsc.wustl.edu:{params.mgi_bam_root}/{sample.srr_id}.bam "
                "external_data/GTEx_RNA_bam/{sample.case}.brain_cortex.bam"
            )
            shell(
                "rsync -a --info=progress2 "
                "vw5.gsc.wustl.edu:{params.mgi_bam_root}/{sample.srr_id}.bam.bai "
                "external_data/GTEx_RNA_bam/{sample.case}.brain_cortex.bam.bai"
            )

# The resulting FASTQ files are weird
# rule gtex_bam_to_fq:
#     input: 'external_data/GTEx_RNA_bam/{case}.brain_cortex.bam'
#     output:
#         r1='processed_data/GTEx_RNA_fq/{case}.R1.fastq.gz',
#         r2='processed_data/GTEx_RNA_fq/{case}.R2.fastq.gz'
#     shell:
#         'samtools fastq -1 {output.r1} -2 {output.r2} -0 /dev/null -s /dev/null -n {input}'



# }}}


rule link_gdc_rna_fastq:
    """Link the RNA-seq fastqs locally."""
    input: manifest=OMIC_UUID_MANIFEST,
           local_map=KATMAI_MAP
    output: expand('external_data/GDC_RNA_fq/{sample}.{read}.fastq.gz', sample=SAMPLES, read=['R1', 'R2'])
    run:
        # Create a UUID to local file path map
        uuid_to_local_file_pth = {}
        with open(input['local_map']) as f:
            reader = csv.DictReader(f, dialect='excel-tab')
            for row in reader:
                # Keep only RNA-seq UUIDs
                if row['experimental_strategy'] == 'RNA-Seq':
                    uuid_to_local_file_pth[row['UUID']] = Path(row['data_path'])

        # Link the FASTQs
        with open(input['manifest']) as f:
            reader = csv.DictReader(f, dialect='excel-tab')
            for row in reader:
                sample = row['case']
                r1_uuid = row['rna_tumor_R1_fastq']
                r2_uuid = row['rna_tumor_R2_fastq']

                r1_src_pth = uuid_to_local_file_pth[r1_uuid]
                r2_src_pth = uuid_to_local_file_pth[r2_uuid]
                r1_dst_pth = Path(f'external_data/GDC_RNA_fq/{sample}.R1.fastq.gz')
                r2_dst_pth = Path(f'external_data/GDC_RNA_fq/{sample}.R2.fastq.gz')
                r1_dst_pth.symlink_to(r1_src_pth)
                r2_dst_pth.symlink_to(r2_src_pth)


rule download_tx_ref:
    """Download transcript related reference files."""
    output:
        gtf='external_data/genome_ref/Homo_sapiens.GRCh38.90.gtf.gz',
        cdna='external_data/genome_ref/Homo_sapiens.GRCh38.cdna.all.fa.gz'
    params:
        ensembl_gtf_url='ftp://ftp.ensembl.org/pub/release-90/gtf/homo_sapiens/Homo_sapiens.GRCh38.90.gtf.gz',
        ensembl_cdna_url='ftp://ftp.ensembl.org/pub/release-90/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz'
    shell:
        '''
        curl {params.ensembl_gtf_url} -o {output.gtf}
        curl {params.ensembl_cdna_url} -o {output.cdna}
        '''


rule create_gffutils_db:
    """Create a GTF database for fast query."""
    input: rules.download_tx_ref.output['gtf']
    output: 'processed_data/ensembl_tx_gtf_90.db'
    script: 'scripts/create_gffutils_db.py'


rule export_tx_good_tsl:
    """Export transcript IDs of good TSL and protein coding."""
    input: rules.create_gffutils_db.output[0]
    output: 'processed_data/ensembl_tx_ids_good_tsl.list'
    script: 'scripts/export_high_conf_protein_coding_transcripts.py'


rule subset_cdna_fa:
    """Subset the cDNA fasta file."""
    input:
        cdna_fa=rules.download_tx_ref.output['cdna'],
        tx_list=rules.export_tx_good_tsl.output[0]
    output: 'processed_data/tx_ref/ensembl_90.cdna.good_tsl.fa.gz'
    script: 'scripts/subset_cdna.py'


rule build_salmon_index:
    """Build Salmon transcript index."""
    input: rules.subset_cdna_fa.output[0]
    output: 'processed_data/tx_ref/ensembl_90_good_tsl_index/hash.bin'
    params: salmon_ix=SALMON_INDEX
    threads: 2
    shell:
        'salmon index --threads {threads} -t {input} -i {params.salmon_ix}'


rule quant_one_sample:
    """Gene quantification on one sample using Salmon."""
    input:
        r1_fq='external_data/GDC_RNA_fq/{sample}.R1.fastq.gz',
        r2_fq='external_data/GDC_RNA_fq/{sample}.R2.fastq.gz'
    output: 'processed_data/quants/{sample}/quant.sf'
    params:
        salmon_ix=SALMON_INDEX,
        out_folder='processed_data/quants/{sample}'
    threads: 4
    log: 'logs/salmon_quants/{sample}.log'
    shell:
        'salmon quant -i {params.salmon_ix} -l A --gcBias '
        '-1 {input.r1_fq} -2 {input.r2_fq} '
        '-p {threads} -o {params.out_folder} '
        '2> {log}'


rule quant_all_samples:
    input: expand('processed_data/quants/{sample}/quant.sf', sample=SAMPLES)


# Experiment with different transcript reference set {{{
rule quant_one_sample_full_tx_ref:
    """Gene quantification on one sample using Salmon and using full Ensembl transcript set."""
    input:
        r1_fq='external_data/GDC_RNA_fq/{sample}.R1.fastq.gz',
        r2_fq='external_data/GDC_RNA_fq/{sample}.R2.fastq.gz'
    output: 'processed_data/experiments/full_tx_ref_quants/{sample}/quant.sf'
    params:
        salmon_ix='processed_data/tx_ref/ensembl_90_full_index',
        out_folder='processed_data/experiments/full_tx_ref_quants/{sample}'
    threads: 4
    shell:
        'salmon quant -i {params.salmon_ix} -l A --gcBias '
        '-1 {input.r1_fq} -2 {input.r2_fq} '
        '-p {threads} -o {params.out_folder} '

rule experiment_full_tx:
    input: expand('processed_data/experiments/full_tx_ref_quants/{sample}/quant.sf', sample=['C3L-00016', 'C3L-01839'])
# }}}

# vim:set foldmethod=marker:
