import csv
import gzip
from pathlib import Path
from textwrap import dedent

GDC_BAM_VARIANT_MAP_PTH = 'manifests/erik_germlinewrapper_v1.1_maf_pth.gdc_bams.tsv.gz'
WASHU_BAM_VARIANT_MAP_PTH = 'manifests/erik_germlinewrapper_v1.1_maf_pth.washu_bams.tsv.gz'
MGI_HOST = 'vw3.gsc.wustl.edu'

def read_map(pth):
    with gzip.open(pth, 'rt') as f:
        reader = csv.DictReader(f, dialect='excel-tab')
        return {
            row['case']: {
                'maf_pth': row['maf_pth'],
                'vep_vcf_pth': row['vep_vcf_pth'],
            }
            for row in reader
        }

case_to_variant_pth_map = {
    **read_map(GDC_BAM_VARIANT_MAP_PTH),
    **read_map(WASHU_BAM_VARIANT_MAP_PTH),
}


rule download_maf:
    """Download one germlinewrapper MAF."""
    output:
        maf='external_data/germlinewrapper/maf/{case}.maf.gz',
        uncompressed_maf=temp('external_data/germlinewrapper/maf/{case}.maf')
    params:
        remote_maf_pth=lambda wildcards: case_to_variant_pth_map[wildcards.case]['maf_pth'],
    resources:
        ssh_connections=1
    shell:
        dedent(r'''
        rsync -a {MGI_HOST}:{params.remote_maf_pth} {output.uncompressed_maf}
        gzip -9 -c {output.uncompressed_maf} > {output.maf}
        ''')


rule download_vep_vcf:
    """Download one germlinewrapper VEP annotated VCF."""
    output:
        vcf='external_data/germlinewrapper/vep_vcf/{case}.vcf.gz',
        uncompressed_vcf=temp('external_data/germlinewrapper/vep_vcf/{case}.vcf')
    params:
        remote_vcf_pth=lambda wildcards: case_to_variant_pth_map[wildcards.case]['vep_vcf_pth'],
    resources:
        ssh_connections=1
    shell:
        dedent(r'''
        rsync -a {MGI_HOST}:{params.remote_vcf_pth} {output.uncompressed_vcf}
        bgzip -l9 -c {output.uncompressed_vcf} > {output.vcf}
        ''')


rule all_mafs:
    """All germlinewrapper final MAFs."""
    input: expand(rules.download_maf.output['maf'], case=case_to_variant_pth_map.keys())


rule all_vep_vcfs:
    """All germlinewrapper VEP annotated VCFs."""
    input: expand(rules.download_vep_vcf.output['vcf'], case=case_to_variant_pth_map.keys())


# rule combine_all_mafs:
#     """Combine all MAFs into one."""
#     output: 'processed_data/combined_mafs/germlinewrapper_all_cases.maf.gz'
#     input:
#         all_mafs=expand(rules.download_maf.output['maf'], case=case_to_variant_pth_map.keys())
#     script: 'scripts/combine_mafs.py'
