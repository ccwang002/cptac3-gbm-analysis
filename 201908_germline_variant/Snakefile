import csv
import gzip
from pathlib import Path
from textwrap import dedent

CASE_LIST_PTH = '../201901_locate_discovery_data/cptac3_gbm_discovery_samples.list'

with open(CASE_LIST_PTH) as f:
    CASES = [case for case in f.read().splitlines() if case.startswith('C')]
    assert len(CASES) == 100


rule move_vcf:
    input: 'external_data/germlinewrapper/vep_vcf/{case}.vep95.vcf.gz'
    output: 'processed_data/germlinewrapper_vcf/{case}.vep95.vcf.gz'
    shell: 'mv {input} {output}'


rule convert_vcf_to_maf:
    """Convert annotated VCF to MAF."""
    input: 'processed_data/germlinewrapper_vcf/{case}.vep95.vcf.gz'
    output:
        maf='processed_data/germlinewrapper_maf/{case}.maf.gz',
        uncompress_maf=temp('processed_data/germlinewrapper_maf/{case}.maf'),
        uncompress_vcf=temp('processed_data/germlinewrapper_vcf/{case}.vcf'),
    params:
        # The vcf2maf here is a hacked script that removed the ability to launch
        # VEP and validate the reference genome (and hence faster)
        vcf2maf='scripts/vcf2maf.v1.6.16.no_vep_no_ref.pl',
    shell:
        dedent(r'''
        gzip -c -d {input} > {output.uncompress_vcf}
        perl {params.vcf2maf} \
            --input-vcf {output.uncompress_vcf} --output-maf {output.uncompress_maf} \
            --tumor-id {wildcards.case}_T --normal-id {wildcards.case}_N \
            --vcf-normal-id {wildcards.case}.N \
            --filter-vcf 0 --ncbi-build GRCh38 >/dev/null 2>&1
        gzip -c -9 {output.uncompress_maf} > {output.maf}
        ''')


rule all_vcfs:
    """All germlinewrapper final VCFs."""
    input: expand(rules.move_vcf.output[0], case=CASES)


rule all_mafs:
    """All germlinewrapper final MAFs."""
    input: expand(rules.convert_vcf_to_maf.output['maf'], case=CASES)
