import os
from pathlib import Path
import csv


RAW_VCF_MANIFEST = 'gdc_manifests/gbm_raw_vcfs.2018-11-21.txt'
ANNOTATED_VCF_MANIFEST = 'gdc_manifests/gbm_annotated_vcfs.2018-11-26.txt'

SAMPLES = set()
with open(ANNOTATED_VCF_MANIFEST) as f:
    reader = csv.DictReader(f, dialect='excel-tab')
    SAMPLES = set(row['case ID'] for row in reader)

CALLERS = ['varscan2', 'somaticsniper', 'mutect2', 'muse']


rule link_gdc_raw_vcfs:
    """Link the raw GDC VCFs locally."""
    input: manifest=RAW_VCF_MANIFEST
    output: expand('external_data/GDC/raw_vcfs/{sample}.{caller}.vcf.gz', sample=SAMPLES, caller=CALLERS)
    params:
        vcf_root='/diskmnt/Projects/cptac_downloads/gdc_somatic_mutations/unversioned'
    run:
        with open(input['manifest']) as f:
            reader = csv.DictReader(f, dialect='excel-tab')
            for row in reader:
                sample = row['case_submitter_id']
                caller = row['file_name'].split('.')[-4].lower()
                src_vcf_pth = Path(params['vcf_root'], row['id'], row['file_name'])
                dst_pth = Path(f'external_data/GDC/raw_vcfs/{sample}.{caller}.vcf.gz')
                dst_pth.symlink_to(src_vcf_pth)


rule link_gdc_annotated_vcfs:
    """Link the annotated GDC VCFs locally."""
    input: manifest=ANNOTATED_VCF_MANIFEST
    output: expand('external_data/GDC/annotated_vcfs/{sample}.{caller}.vcf.gz', sample=SAMPLES, caller=CALLERS)
    params:
        vcf_root='/diskmnt/Projects/cptac_downloads/gdc_somatic_mutations/unversioned'
    run:
        with open(input['manifest']) as f:
            reader = csv.DictReader(f, dialect='excel-tab')
            for row in reader:
                sample = row['case ID']
                caller = row['file_name'].split('.')[-4].lower()
                src_vcf_pth = Path(params['vcf_root'], row['id'], row['file_name'])
                dst_pth = Path(f'external_data/GDC/annotated_vcfs/{sample}.{caller}.vcf.gz')
                dst_pth.symlink_to(src_vcf_pth)


rule annotated_vcf_to_maf:
    """Convert one annotated GDC VCF to MAF without re-annotation by VEP."""
    input: 'external_data/GDC/annotated_vcfs/{sample}.{caller}.vcf.gz'
    output:
        uncompress_vcf=temp('processed_data/gdc_temp_vcfs/{sample}.{caller}.vcf'),
        maf='processed_data/gdc_mafs/{sample}.{caller}.maf.gz'
    params:
        # The vcf2maf here is a hacked script that remove the ability to launch
        # VEP and validate the reference genome (and hence faster)
        vcf2maf='scripts/vcf2maf.v1.6.16.no_vep_no_ref.pl',
        uncompress_maf='processed_data/gdc_mafs/{sample}.{caller}.maf'
    shell:
        '''
        gunzip -c {input} > {output.uncompress_vcf}
        perl {params.vcf2maf} \
            --input-vcf {output.uncompress_vcf} --output-maf {params.uncompress_maf} \
            --tumor-id {wildcards.sample}.T --normal-id {wildcards.sample}.N \
            --vcf-tumor-id TUMOR --vcf-normal-id NORMAL \
            --filter-vcf 0 --ncbi-build GRCh38
        gzip -9 {params.uncompress_maf}
        '''


rule all_gdc_annotated_mafs:
    """Convert all GDC annotated VCFs to MAFs."""
    input: expand('processed_data/gdc_mafs/{sample}.{caller}.maf.gz', sample=SAMPLES, caller=CALLERS)


rule load_raw_vcfs_to_db:
    """Load raw VCFs to the database."""
    input: raw_vcfs=rules.link_gdc_raw_vcfs.output
    output: db='processed_data/gdc_mut_calls.sqlite'
    script: 'scripts/make_db.py'
